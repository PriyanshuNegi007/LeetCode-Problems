class Solution {
    public int[][] merge(int[][] intervals) {
        //Step 1 - Sort the Interval
        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        //Step 2 -Store the final Result
        List<int[]> result=new ArrayList<>();
        //Step 3 - Traverse the intervals one by one
        for(int [] interval:intervals){
            //this interval not overlap so add it
            //result.getused to get last slot e.g[9,11]
            //[0]= start time, [1]= end time
            if(result.size()==0 || result.get(result.size()-1)[1]<interval[0]){
                result.add(interval);
            }else{
                //if overlap then merge
                result.get(result.size()-1)[1]=Math.max(result.get(result.size()-1)[1] , interval[1]);
            }
        }
        return result.toArray(new int[result.size()][]); // convert list into 2D array
    }
}
